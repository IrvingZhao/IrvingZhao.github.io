<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端vue新老项目同步运行方案</title>
      <link href="/2020/01/20/%E5%89%8D%E7%AB%AFvue%E6%96%B0%E8%80%81%E9%A1%B9%E7%9B%AE%E5%90%8C%E6%AD%A5%E8%BF%90%E8%A1%8C%E6%96%B9%E6%A1%88/"/>
      <url>/2020/01/20/%E5%89%8D%E7%AB%AFvue%E6%96%B0%E8%80%81%E9%A1%B9%E7%9B%AE%E5%90%8C%E6%AD%A5%E8%BF%90%E8%A1%8C%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h2 id="关于Vue新老项目并行方案介绍"><a href="#关于Vue新老项目并行方案介绍" class="headerlink" title="关于Vue新老项目并行方案介绍"></a>关于Vue新老项目并行方案介绍</h2><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><blockquote><p>Vue新老系统并行产生场景：技术架构迭代时的，由于原有项目的架构无法适应业务的发展需要，从而做项目重构时，会出现新老系统并行的需求。</p></blockquote><h3 id="所需技术点"><a href="#所需技术点" class="headerlink" title="所需技术点"></a>所需技术点</h3><ol><li>nginx 配置</li><li>vue-router配置</li><li>webpack打包配置</li></ol><h3 id="方案操作流程"><a href="#方案操作流程" class="headerlink" title="方案操作流程"></a>方案操作流程</h3><h4 id="路径规划"><a href="#路径规划" class="headerlink" title="路径规划"></a>路径规划</h4><blockquote><p>需新老系统进行访问basepath规划，例如：<a href="http://host/n" target="_blank" rel="noopener">http://host/n</a> 访问新系统，<a href="http://host/o" target="_blank" rel="noopener">http://host/o</a> 访问老系统</p></blockquote><h4 id="系统改造"><a href="#系统改造" class="headerlink" title="系统改造"></a>系统改造</h4><blockquote><p>系统改造需调整项目中的路由配置，webpack打包配置，登录信息配置等其他相关内容</p><p>以下说明均以<code>/n</code>为新系统访问basepath，<code>/o</code>为老系统访问的basepath</p></blockquote><h5 id="路由配置调整"><a href="#路由配置调整" class="headerlink" title="路由配置调整"></a>路由配置调整</h5><blockquote><p>VueRouter 初始化参数，老系统：<code>{base:&quot;/o/&quot;,mode:&quot;history&quot;}</code>，新系统：<code>{base:&quot;/n/&quot;,mode:&quot;history&quot;}</code></p><p>VueRouter中添加全局前置守卫：<code>router.beforeEach</code>，守卫中需根据每次路由跳转时的地址，进行分发。分发时需定义规则，如：<code>/n/*</code>跳转至新系统，<code>/o/*</code>跳转至老系统，其他地址跳转当前系统。</p><p>一下代码为老系统中的跳转代码，新系统则与老系统相反</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newPathReg = <span class="regexp">/^\/n\//</span>;</span><br><span class="line"><span class="keyword">const</span> oldPathReg = <span class="regexp">/^\/o\//</span>;</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (oldPathReg.test(to.path)) &#123;</span><br><span class="line">        <span class="keyword">const</span> toPath = <span class="string">"/"</span> + to.path.replace(oldPathReg, <span class="string">""</span>);</span><br><span class="line">        next(toPath);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (newPathReg.test(to.path)) &#123;</span><br><span class="line">            <span class="built_in">window</span>.location.href = to.path;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></blockquote><h5 id="webpack配置"><a href="#webpack配置" class="headerlink" title="webpack配置"></a>webpack配置</h5><blockquote><p>Webpack配置，<code>webpack.config.js</code>中的<code>output.publicPath</code>需与路由中的<code>base</code>值保持一致，用于打包时，不同的静态资源能够有相同的前缀。</p><p>对于vue-cli 2.0 的项目，需要调整<code>config/index.js</code>中的<code>assetsPublicPath</code> </p><p>对于vue-cli 3.0 的项目，需要设置<code>vue.config.js</code>中的<code>publicPath</code></p></blockquote><h4 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h4><blockquote><p>在nginx中，需配置不同的路径指向不同的静态资源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        try_files &amp;uri $uri&#x2F; &#x2F;o&#x2F;index.html?&amp;args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;o &#123;</span><br><span class="line">        root &#x2F;static-root;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">        try_files $uri $uri&#x2F; &#x2F;o&#x2F;index.html?&amp;args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;n &#123;</span><br><span class="line">        root &#x2F;static-root;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">        try_files $uri $uri&#x2F; &#x2F;n&#x2F;index.html?&amp;args;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 其他转发配置</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据上面的nginx配置，老系统代码存放目录<code>/static-root/n</code>，新系统代码存放目录<code>/static-root/o</code>，默认跳转至老系统首页</p><p>应用此配置时，切记不可配置<code>server</code>的<code>root</code>项</p></blockquote><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><blockquote><p>通过以上的配置，新老系统可以同时在同一域名下完成访问，并且新老系统中，可以根据地址转发规则，相互跳转</p><p>在调整配置时，需要注意新老系统中的一些全局配置信息，例如：登录配置、登陆信息保存、检查、登录页跳转、sessionStrage的使用</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端基础项目总结</title>
      <link href="/2020/01/09/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
      <url>/2020/01/09/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="前端基础项目总结"><a href="#前端基础项目总结" class="headerlink" title="前端基础项目总结"></a>前端基础项目总结</h3><blockquote><p>前端项目开发过程中，在技术选型结束后，通常会选取组件库、约束项目结构、目录结构、模块结构</p></blockquote><h4 id="组件库"><a href="#组件库" class="headerlink" title="组件库"></a>组件库</h4><blockquote><p>基于Element-ui v2.13.0组件库进行开发</p></blockquote><h4 id="工程模块结构"><a href="#工程模块结构" class="headerlink" title="工程模块结构"></a>工程模块结构</h4><p>整体项目下分如下项目：</p><ol><li>基础框架工程 - 提供组件库扩展、复写、工具类等内容</li><li>template工程 - 用于构建业务模块项目的模板项目，提供基础启动、配置、目录约束、文件抛出约束等约束性内容</li><li>部署工程 -  用于集成测试、联调、线上打包部署使用，主依赖基础框架工程，将需要构建的业务模块工程加入依赖，并根据引入规范进行引入</li><li>业务模块工程 - 用于编写业务模块内容</li></ol><h4 id="该结构遇到的问题及解决方案"><a href="#该结构遇到的问题及解决方案" class="headerlink" title="该结构遇到的问题及解决方案"></a>该结构遇到的问题及解决方案</h4><ol><li>开发中遇到基础框架出现问题。</li></ol><blockquote><p>可优先将业务模块中的引用源码修改，并同步基础框架工程，后续根据需求，进行整体修改、调整、适配</p></blockquote><ol start="2"><li>业务模块工程进行多模块集成测试部署</li></ol><blockquote><p>在该场景下，多模块的应用频繁修改发布测试是比较重要的问题。</p><p>解决方案1：可使用link的方式，由部署工程link业务模块工程，在测试部署时，更新业务模块工程，而后编译部署工程，从而实现部署（已测试）</p><p>解决方案2：细化部署文件目录结构，编译业务模块后，直接将业务模块的内容按照目录约束，更新至部署目录。此方案需关闭chunk的hash模式，在浏览器强缓存的情况下会影响页面刷新。</p><p>解决方案3：由解决方案2进行扩展，编写plugin，实现部署工程对于业务模块中的chunk文件的定义及声明动态依赖，从而实现业务模块的独立部署</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Node - 手动Proxy</title>
      <link href="/2020/01/08/Node%20-%20%E6%89%8B%E5%8A%A8Proxy/"/>
      <url>/2020/01/08/Node%20-%20%E6%89%8B%E5%8A%A8Proxy/</url>
      
        <content type="html"><![CDATA[<h2 id="Node-koa-做服务代理踩坑奇遇记"><a href="#Node-koa-做服务代理踩坑奇遇记" class="headerlink" title="Node + koa 做服务代理踩坑奇遇记"></a>Node + koa 做服务代理踩坑奇遇记</h2><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><blockquote><p>有些时候，前端请求后端服务时，需改变请求参数格式、请求方法、跨域等其他需求时</p></blockquote><h3 id="基于-http"><a href="#基于-http" class="headerlink" title="基于 http"></a>基于 http</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">"拦截的地址"</span>, <span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">    ctx.respond = <span class="literal">false</span> <span class="comment">// 阻止koa原有写入，不设置会导致 write after end 错误</span></span><br><span class="line">    <span class="comment">// 如果在发送请求时，需要设置head，可以把远程地址替换为请求配置信息，</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> httpReq = http.get(<span class="string">"远程地址"</span>, <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        res.on(<span class="string">"data"</span>, <span class="function">(<span class="params">chun</span>) =&gt;</span> &#123;</span><br><span class="line">            ctx.res.write(chun, (<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.info(error)</span><br><span class="line">            &#125;))</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.info(chun)</span><br><span class="line">        &#125;)</span><br><span class="line">        res.on(<span class="string">"end"</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            ctx.res.end() <span class="comment">// 结束响应写入，不调用会导致请求的连接无法结束，阻塞进程</span></span><br><span class="line">        &#125;)</span><br><span class="line">        res.on(<span class="string">"close"</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.info(<span class="string">" close =============="</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    httpReq.write(<span class="string">""</span>) <span class="comment">// 写入数据，自行格式化诸如json、form等格式</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>基于node的http模块，自由度较高，但是所有内容均需要自己进行手写，例如：请求流的构建、响应的解析，</p></blockquote><h3 id="基于-axios，正常创建、配置axios对象进行请求的发送"><a href="#基于-axios，正常创建、配置axios对象进行请求的发送" class="headerlink" title="基于 axios，正常创建、配置axios对象进行请求的发送"></a>基于 axios，正常创建、配置axios对象进行请求的发送</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">"拦截的地址"</span>, <span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">    ctx.respond = <span class="literal">false</span> <span class="comment">// 阻止koa原有写入，不设置会导致 write after end 错误</span></span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">"router append ================= "</span>)</span><br><span class="line"></span><br><span class="line">    axios.get(<span class="string">"远程地址"</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.info(res.data)</span><br><span class="line">        ctx.res.write(res.data)</span><br><span class="line">        ctx.res.end() <span class="comment">// 同样需要手动结束</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>基于axios成熟的类库进行构建，相对减少额外封装不必要的封装，适合请求或响应需要二次处理时使用，可避免再次编写请求流的构建和响应的解析</p></blockquote><h3 id="基于-http-proxy"><a href="#基于-http-proxy" class="headerlink" title="基于 http-proxy"></a>基于 http-proxy</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// proxy 对象构建</span></span><br><span class="line"><span class="keyword">const</span> proxy = HttpProxy.createProxyServer(&#123; <span class="comment">// 配置proxy 信息</span></span><br><span class="line">    target: <span class="string">"目标地址"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">proxy.on(<span class="string">"proxyReq"</span>, <span class="function">(<span class="params">proxyReq, req, res, &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 调整目标地址</span></span><br><span class="line">    <span class="comment">// 设置请求头</span></span><br><span class="line">&#125;)</span><br><span class="line">proxy.on(<span class="string">"proxyRes"</span>, <span class="function">(<span class="params">proxyRes, req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// proxy对象使用</span></span><br><span class="line">proxy.web(req, res)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 proxy.web 的位置可以是 </span></span><br><span class="line">app.use(<span class="function">(<span class="params">ctx,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 根据请求地址、请求头或其他信息进行转发</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">"拦截的地址"</span>, <span class="function">(<span class="params">ctx</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// koa 路由中转发</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 覆盖响应</span></span><br><span class="line">proxy.on(<span class="string">'proxyRes'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">proxyRes, req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body = [];</span><br><span class="line">    proxyRes.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">        body.push(chunk);</span><br><span class="line">    &#125;);</span><br><span class="line">    proxyRes.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        body = Buffer.concat(body).toString();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"res from proxied server:"</span>, body);</span><br><span class="line">        res.end(<span class="string">"my response to cli"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>http-proxy 与 http 模块直接转发差异不大，目前还未找到如何修改请求体，相较于http，在配置的内容不多时，使用http-proxy会比较简单</p></blockquote><h4 id="请求头及响应头问题"><a href="#请求头及响应头问题" class="headerlink" title="请求头及响应头问题"></a>请求头及响应头问题</h4><blockquote><p>在使用axios和http进行proxy的时候，需要注意请求的请求头和响应头，避免出现乱码或其他问题</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/01/01/hello-world/"/>
      <url>/2020/01/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
